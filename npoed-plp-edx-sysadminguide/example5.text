Ассоциация \<\<Национальная платформа открытого образования\>\>\
Санкт-Петербургский политехнический университет\

<span>0.4</span>

*СОГЛАСОВАНО:*\
Директор Ассоциации\

 

<span>0.4</span>

*УТВЕРЖДАЮ:*\
Руководитель группы\

Ицыксон В.М.

\

\
<span> **АРМ вуза. \<\<Руководство системного программиста\>\>**</span>\
\

Санкт-Петербург, 2016

Аннотация {#аннотация .unnumbered}
=========

Руководство системного программиста. Раскрыты общие сведения о
программе, требования к программным средствам. Описана структура
программы. Описаны процессы установки и настройки ПО.

Общие сведения о программе
==========================

ПО `PLP` представляет из себя подсистему Платформы \<\<Открытое
образование\>\>. Оно представляет из себя каталог курсов, включающий в
себя описание курсов, вузов, преподавателей, укрупненных групп и
направлений подготовки. `PLP` реализован как приложение на `Django`.

Требования к программным средствам
----------------------------------

Для корректной установки и функционирования `PLP` требуется наличие
следующего предустановленного программного обеспечения:

-   ОС Linux

-   Сервер БД MySQL 5.6

-   Python 2.7

-   RabbitMQ

-   Memcached

-   Supervisor

-   Nginx

Структура программы
===================

Сведения о структуре программы
------------------------------

`PLP` состоит из непосредственно каталога курсов и АРМ сотрудника вуза.

Сведения о связях с другими программами
---------------------------------------

Являясь одной из подсистем Национальной платформы открытого образования,
`PLP` активно взаимодействует с другими подсистемами: `SSO`, `EDX CMS` и
`EDX LMS`

Связь с `SSO` в основном происходит для осуществления аутентификации и
авторизации пользователей. Кроме того, в `SSO` присылается информация о
создаваемых в `PLP` университетах, курсах и сессиях курсов. Приглашаемые
на платформу студенты и преподаватели также отправляются в `SSO`.

Создаваемые сессии курсов кроме `SSO` отправляются ещё и в `EDX CMS`.

Связь с `EDX LMS` осуществляется для записи студентов на сессии курсов.

Настройка программы
===================

Установка PLP
-------------

Действия по установке необходимо выполнять от пользователя без прав
администратора, кроме пунктов, где отдельно указано обратное. Для
установки `PLP` необходимо выполнить следующие действия:

-   Скопировать исходный код `PLP` из репозитория
    <https://github.com/npoed/npoed-plp-edx> в какой-либо каталог
    (создание каталога для файлов подсистемы может потребовать
    выполнения от администратора системы) и перейти в этот каталог в
    интерпретаторе командной строки.

-   Установить зависимости из файла apt-requrements.txt (от
    администратора системы). Названия пакетов в нём приводятся для ОС
    Ubuntu Linux и могут отличаться в других ОС.

-   Создать виртуальное окружение Python командой:\
    `virtualenv .env`

-   Активировать созданное виртуальное окружение командой:\
    `source .env/bin/activate`

-   Установить Python-зависимости командой:\
    `pip install -r requirements.txt`

Настройка RabbitMQ и Celery
---------------------------

Некоторые функции `PLP` и `SSO` выполняются асинхронно с помощью
`Celery`. Поэтому для полноценного их функционирования нужно настроить
`Celery` и `RabbitMQ`, который выступает в качестве менеджера очереди
сообщений для `Celery`.

Для настройки `RabbitMQ` нужно выполнить следующие действия:

-   Создать виртуальный хост\
    `sudo rabbitmqctl add_vhost <имя хоста>`

-   Создать пользователя\
    `sudo rabbitmqctl add_user <имя пользователя> <пароль>`

-   Выдать пользователю права на созданный хост\
    `sudo rabbitmqctl set_permissions -p <имя хоста> <имя пользователя> .* .* .*`

Даже если `PLP` и `SSO` развёрнуты на одном компьютере, хосты в
`RabbitMQ` для них должны быть созданы разные.

Для `Celery` нужно настроить только автоматический запуск при старте
системы. Для этого нужно найти в дистрибутиве `Celery` скрипт
соответствующий предпочитаемому в Вашей ОС способу запуска
(`init-script`, `systemd`, `supervisord` и т.д.) и скопировать его в
соответствующее место. Кроме этого нужно создать конфигурационный файл
`/etc/default/celeryd` следующего содержания для `PLP`: и для `SSO`:

Настройка SSO
-------------

-   В настройках `SSO` (`npoed_sso_edx/local_settings.py`) нужно задать:

    -   `PLP_URL` — адрес, по которому будет развёрнуто `PLP`

    -   `SSO_API_KEY` — `API`-ключ `SSO` (задать, если ещё не задан)
        (произвольная строка)

    -   `BROKER_VHOST` — имя виртуального хоста RabbitMQ

    -   `BROKER_USER` — имя пользователя RabbitMQ

    -   `BROKER_PASSWORD` — пароль пользователя RabbitMQ

-   В административной панели нужно внести следующие изменения:

    -   В разделе `Provider/Clients` нужно создать клиента со следующими
        параметрами:

        -   `Url` — адрес, по которому будет развёрнут `PLP`

        -   `Redirect uri` — адрес, по которому будет развёрнут `PLP` +
            `/complete/npoedsso/`

        -   `Client id` и `Client secret` — эти поля заполнятся
            автоматически, их значения нужно будет перенести в настройки
            `PLP`

    -   В разделе `Oauth2_Provider/Trusted clients` нужно создать
        доверенного клиента для только созданного клиента `PLP`

    -   В разделе `Authtoken/Tokens` нужно создать токен (если он ещё не
        создан) для пользователя, имеющего набор прав суперпользователя
        (право `*/*/*`)

Настройка EDX
-------------

### Настройка параметров взаимодействия с PLP

-   В конфигурационных файлах `cms.env.json` и `lms.env.json` необходимо
    задать параметр `PLP_URL` — адрес, по которому будет развёрнуто
    `PLP`

-   Необходимо установить расширение `open_edx_api_extension_cms`. Для
    этого:

    -   Необходимо установить расширение с помощью `pip`

    -   В файле `cms/envs/common.py` в параметр `INSTALLED_APPS` нужно
        добавить `open_edx_api_extension_cms`

    -   В файле `cms/urls.py` в параметр `urlpatterns` нужно добавить
        `url(r^api/extended/, include(open_edx_api_extension_cms.urls, namespace=api_extension))`

    -   В файле `cms/envs/aws.py` нужно добавить строку
        `EDX_API_KEY = AUTH_TOKENS.get(EDX_API_KEY)`

    -   В кофигурационном файле `cms.auth.json` нужно задать параметр
        `EDX_API_KEY`, причем таким же значением, как и в файле
        `lms.auth.json`

    -   Если в `EDX CMS` отсутствует пользователь с ролью `GlobalAdmin`
        (пользователь с `is_staff` равным `True`), то его нужно создать,
        так как от его имени будут создаваться курсы.

### Настройка подсистемы сбора аналитики EDX

Для запуска задач по расписанию, выполняющих сбор и агрегацию данных из
БД `EDX`, хранилища курсов `EDX`, журнала событий `EDX` необходимо
выполнить следующие подготовительные действия

-   С помощью менеджера конфигураций `ansible` выполнить установку роли
    `analytics-pipeline`

-   Создать директорию для приложения сбора данных, например
    `/edx/app/pipeline`, перейти в созданную директорию

-   Создать виртуальное окружение Python командой:\
    `virtualenv pipeline`

-   Активировать созданное виртуальное окружение командой:\
    `source pipeline/bin/activate`

-   Скопировать исходный код подсистемы сбора данных
    `edx-analytics-pipeline` из репозитория
    <https://github.com/npoed/edx-analytics-pipeline> в какой-либо
    каталог (создание каталога для файлов подсистемы может потребовать
    выполнения от администратора системы) и перейти в этот каталог в
    интерпретаторе командной строки

-   Сформировать окружение для подсистемы сбора данных командой:\
    `make bootstrap`

-   Создать хранилище для подсистемы сбора данных командой:\

    `sudo -Hu hadoop /edx/app/hadoop/hadoop/bin/hadoop fs -mkdir hdfs://127.0.0.1:9000/edx-analytics-pipeline/warehouse`

-   Создать директорию временных выходных данных для подсистемы сбора
    данных командой:\

    `sudo -Hu hadoop /edx/app/hadoop/hadoop/bin/hadoop fs -mkdir hdfs://127.0.0.1:9000/edx-analytics-pipeline/output_root`

-   Создать директорию для обработки журнала событий командой:\

    `sudo -Hu hadoop /edx/app/hadoop/hadoop/bin/hadoop fs -mkdir hdfs://127.0.0.1:9000/data`

-   Поместить журнал событий в созданную директорию командой:\

    `sudo -Hu hadoop /edx/app/hadoop/hadoop/bin/hdfs dfs -put -f /edx/var/log/tracking/tracking.log-* hdfs://localhost:9000/data`

-   Сформировать файл `/edx/etc/edx-analytics-pipeline/input.json` с
    параметрами доступа к БД `EDX` следующего содержания:

-   Сформировать файл `/edx/etc/edx-analytics-pipeline/output.json` с
    параметрами доступа к БД результатов сбора данных следующего
    содержания:

-   Создать БД для метаданных подсистемы обработки событий командой:\
    `mysql> CREATE DATABASE edx_hive_metastore CHARACTER SET = latin1;`

-   Выдать разрешения на БД для метаданных подсистемы обработки событий
    командой:\
    `mysql> GRANT ALL PRIVILEGES ON edx_hive_metastore.* TO edx_hive_metastore@host IDENTIFIED BY ’edx’;`

-   В файле `/edx/app/hadoop/hive/conf/hive-site.xml` указать параметры
    доступа к БД для метаданных подсистемы обработки событий. В
    результате должен получиться файл следующего содержания:\

-   В файлах `/edx/app/pipeline/edx-analytics-pipeline/client.cfg` и
    `/edx/app/pipeline/edx-analytics-pipeline/override.cfg` указать
    параметры:

    -   путь к исполняемому файлу интерпретатора `Python` в виртуальном
        окружении подсистемы обработки событий в секции `hadoop`

    -   доступ к БД результатов сбора данных в секции `database-export`

    -   доступ к БД `EDX` в секции `database-import`

    -   доступ к хранилищу курсов `EDX` в секции `mongodb`

    -   шаблон имени файла с событиями `EDX` в секции `event-logs`

    В результате должен получиться файл `client.cfg` следующего
    содержания:\
     В результате должен получиться файл `override.cfg` следующего
    содержания:\

После подготовительных действий необходимо добавить в планировщик задач
одного их хостов, на котором исполняется `EDX`, директивы для выполнения
от пользователя `hadoop` следующих команд один раз в сутки:

-   `/edx/app/hadoop/hadoop/bin/hadoop fs -rm -r hdfs://127.0.0.1:9000/edx-analytics-pipeline/warehouse/*`

-   `/edx/app/hadoop/hadoop/bin/hadoop fs -rm -r hdfs://127.0.0.1:9000/edx-analytics-pipeline/dest`

-   `/edx/app/hadoop/hadoop/bin/hadoop fs -rm -r hdfs://127.0.0.1:9000/edx-analytics-pipeline/dest/*`

-   `mysql> DROP DATABASE edx_hive_metastore;`

-   `mysql> CREATE DATABASE edx_hive_metastore CHARACTER SET = latin1;`

-   `/edx/app/pipeline/pipeline/bin/launch-task ActivityWorkflow --local-scheduler --n-reduce-tasks 4 --interval 2016-04-01-2016-04-30 --overwrite`

-   `/edx/app/pipeline/pipeline/bin/launch-task CustomEnrollmentTaskWorkflow --local-scheduler --n-reduce-tasks 4 --interval 2016-04-01-2016-04-30 --overwrite`

-   `/edx/app/pipeline/pipeline/bin/launch-task MongoImportTaskWorkflow --local-scheduler --overwrite`

Значение параметра `n-reduce-tasks` должно быть установлено равным
количеству доступных ядер на хосте, на котором производится сбор
аналитики `EDX`.

### Настройка подсистемы сбора аналитики PLP

Для запуска задач по расписанию, выполняющих сбор и агрегацию данных из
БД результатов сбора данных `EDX` (`reports`) необходимо
проинициализировать представления и хранимые процедуры командой,
выполненной из виртуального окружения `PLP`:\
`./manage.py init-analytics –settings=settings.local_settings`\
После подготовительных действий необходимо добавить в планировщик задач
одного их хостов, на котором исполняется `PLP`, директиву для выполнения
команды, приведённой ниже. Данная команда должна выполняться один раз в
сутки от пользователя, от которого запускается `PLP`.\
`./manage import-analytics 2016-03-01 –settings=settings.local_settings`\
При запуске команды необходимо в качестве аргумента указывать дату,
предшествующую дню, когда производится запуск. Формат даты задаётся в
параметре `EVENT_DATE_FORMAT` в настройках `PLP`.

Настройка PLP
-------------

Для дальнейшей настройки `PLP` нужно:

-   Создать базу `MySQL` для `PLP`. Для этого необходимо выполнить
    следующую команду в консоли `MySQL`:\
    `CREATE DATABASE <имя базы> CHAR SET UTF8;`

-   Скопировать файл `npoed_plp/settings/develop.py` в\
    `npoed_plp/settings/local_settings.py`

-   В `local_settings.py` нужно заменить следующие значения:

    -   В `DATABASES[default]` нужно задать:

        -   `ENGINE:` `django.db.backends.mysql`

        -   `NAME:` имя созданной базы `MySQL`

        -   `USER:` имя пользователя для подключения к базе

        -   `PASSWORD:` пароль пользователя для подключения к базе

        -   `HOST:` адрес хоста, на котором расположена база

        -   `PORT:` порт, на котором запущен `MySQL`

    -   `SSO_NPOED_URL` — адрес, по которому развёрнуто `SSO`

    -   `SOCIAL_AUTH_NPOEDSSO_KEY` — `Client id`, заданный в `SSO` для
        `PLP`

    -   `SOCIAL_AUTH_NPOEDSSO_SECRET` — `Client secret`, заданный в
        `SSO` для `PLP`

    -   `SSO_API_TOKEN` — токен суперпользователя, созданный в `SSO`

    -   `SSO_API_KEY` — `API`-ключ `SSO`

    -   `EDX_ENROLLMENT_URL` — адрес, по которому развёрнуто `EDX LMS`

    -   `EDX_CMS_URL` — адрес, по которому развёрнуто `EDX CMS`

    -   `EDX_API_KEY` — `API`-ключ `EDX`

    -   `SITE_NAME` — внешний адрес `PLP`

    -   `BROKER_VHOST` — имя виртуального хоста RabbitMQ

    -   `BROKER_USER` — имя пользователя RabbitMQ

    -   `BROKER_PASSWORD` — пароль пользователя RabbitMQ

-   Для подготовки базы данных к работе нужно выполнить следующие
    команды (виртуальное окружение должно быть активировано):\
    `./manage.py makemigrations --settings=settings.local_settings`\
    `./manage.py migrate --settings=settings.local_settings`

-   Для загрузки начальных данных, необходимых для работы приложения,
    необходимо выполнить команду:\
    `./manage.py load-init-data --settings=settings.local_settings`

-   Необходимо убедиться в наличии прав на чтение в эту директорию, где
    расположены файлы `PLP` для пользователя, от которого будет запущено
    `PLP`

-   Необходимо убедиться в наличии директорий (`STATIC_ROOT`,
    `MEDIA_ROOT` и `CSV_ROOT`), указанных в настройках, а также прав на
    чтение и запись в эти директории для пользователя, от которого будет
    запущено `PLP`

Настройка запуска PLP
---------------------

Для запуска `PLP` необходимы следующие программы: `Supervisor`, `Nginx`
и `gunicorn`. Для их настройки нужно выполнить следующие действия:

-   Создать конфигурационный файл для `Nginx` следующего содержания: В
    этом файле нужно задать адрес `PLP`, адрес и порт `gunicorn`,
    расположение сертификатов и расположение статических файлов.

-   Создать конфигурационный файл для gunicorn, назвать его
    `plp_gunicorn.py` и подкаталог `npoed_plp` установленного
    приложения. Содержимое этого файла должно выглядеть примерно так:

Проверка программы
==================

Проверка на работоспособность осуществляется путём запуска `PLP` и
дальнейшего входа в систему. Если в процессе этих действий не возникло
никаких ошибок, в том числе в лог-файлах, то программу можно считать
работоспособной.

В ходе работы программы в лог-файлах могут возникать следующие
сообщения:

-   `django.db.utils.OperationalError: (2003, Can’t connect to MySQL server on ’127.0.0.1’ (111))`
    — это сообщение появляется, если сервер `MySQL` не запущен или не
    доступен по указанным в настроечном файле адресу и порту.

-   `django.db.utils.OperationalError: (1049, Unknown database ppp)` —
    это сообщение появляется, если имя базы в настроечном файле указано
    неверно

-   `django.db.utils.OperationalError: (1045, Access denied for user maxim@localhost (using password: YES))`
    — это сообщение появляется, если имя пользователя или пароль к базе
    данных в настроечном файле указаны неверно

-   `SSONotAvailable` — это сообщение об ошибке связи с `SSO`, возможно,
    `SSO` перестало отвечать на запросы.

-   `SSOCommunicationError` — это сообщение об ошибке обмена данными с
    `SSO`, скорее всего, программа не была полностью настроена для
    общения с `SSO`.

-   `EDXNotAvailable` — это сообщение об ошибке связи с `EDX CMS` или
    `EDX LMS`, возможно, `EDX CMS` или `EDX LMS` перестал отвечать на
    запросы.

-   `EDXCommunicationError` — это сообщение об ошибке обмена данными с
    `EDX CMS` или `EDX LMS`, скорее всего, программа не была полностью
    настроена для общения с `EDX CMS` или `EDX LMS`.
